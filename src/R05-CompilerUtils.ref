*$FROM LibraryEx
$EXTERN Trim, Map;

*$FROM Library
$EXTERN True, False;

*$FROM Platform
$EXTERN PathSeparator, IsDirectorySeparator;


*$EENUM Source, Output, NotFound

*$ENUM Current

/**
  <R05-LoadPath> == e.Folders

  e.Folders ::= (e.Folder)*
*/
$ENTRY R05-LoadPath {
  = <ParsePath <GetEnv 'R05PATH'>>
    <ParsePath <GetEnv 'REF5RSL'>>
}

ParsePath {
  e.Folder s.Sep e.Path
    , <PathSeparator> : s.Sep
    = <ParseFolder e.Folder> <ParsePath e.Path>;
  e.Folder = <ParseFolder e.Folder>;
}

ParseFolder {
  e.Folder = <ParseFolder-CheckEmpty <Trim e.Folder>>;
}

ParseFolder-CheckEmpty {
  /* пусто */ = /* пусто */;
  e.Folder = (e.Folder);
}

/**
  <R05-FindFiles-Default e.Files>
    == t.FoundFile*

  t.FoundFile ::=
    (Source (e.Source) e.Output)
    (Output e.Output)
    (NotFound e.FileName)
*/
$ENTRY R05-FindFiles-Default {
  e.Files = <R05-FindFiles (<R05-LoadPath>) e.Files>;
}

/**
  <R05-FindFiles (e.Folders) e.Files>
    == t.FoundFile*
*/
$ENTRY R05-FindFiles {
  (e.Folders) e.Files =
    <Map (findfile_AnalyzeFile-ByFolders Current e.Folders) e.Files>;
}

$ENTRY findfile_AnalyzeFile-ByFolders {
  e.Folders (e.FileName) =
    <AnalyzeFile-CheckNotFound
      (e.FileName)
      <Map (findfile_AnalyzeInFolder e.FileName) e.Folders>
    >;
}

$ENTRY findfile_AnalyzeInFolder {
  e.FileName Current = <AnalyzeFile e.FileName>;

  e.FileName (e.Folder) = <AnalyzeFile e.Folder '/' e.FileName>;
}

AnalyzeFile-CheckNotFound {
  (e.FileName) (Source (e.Source) e.Output) e.Variants =
    (Source (e.Source) e.Output);

  (e.FileName) (Output e.Output) e.Variants =
    (Output e.Output);

  (e.FileName) (NotFound e.NotFoundPath) e.Variants =
    <AnalyzeFile-CheckNotFound (e.FileName) e.Variants>;

  (e.FileName) = (NotFound e.FileName);
}

ExistFile-T {
  e.FileName = <ExistFile e.FileName> e.FileName;
}

AnalyzeFile {
  e.FileName '.ref' =
    <AnalyzeSource-CheckExist
      <ExistFile-T e.FileName '.ref'>
    >;

  e.FileName '.c' =
    <AnalyzeOutput-CheckExist
      <ExistFile-T e.FileName '.c'>
    >;

  e.FileName =
    <AnalyzeBoth-CheckExist
      (<ExistFile-T e.FileName '.ref'>) <ExistFile-T e.FileName '.c'>
    >;
}

AnalyzeSource-CheckExist {
  True e.UnitName '.ref'
     = (Source (e.UnitName '.ref') <CutFolder e.UnitName '.c'>);

  False e.SourceName = (NotFound e.SourceName);
}

AnalyzeOutput-CheckExist {
  True e.OutName = (Output e.OutName);

  False e.OutName = (NotFound e.OutName);
}

AnalyzeBoth-CheckExist {
  (True e.SoureName) s.Res e.OutName
    = (Source (e.SoureName) <CutFolder e.OutName>);

  (False e.SoureName) True e.OutName = (Output e.OutName);

  (False e.UnitName '.ref') False e.UnitName '.c' = (NotFound e.UnitName);
}

CutFolder {
  e.Folder s.Sep e.FileName, <IsDirectorySeparator s.Sep> : True
     = <CutFolder e.FileName>;

  e.FileName = e.FileName;
}


/**
  <R05-CCompile e.CSources> == e.RetCode

  e.CSources ::= (s.CHAR* '.c')*
*/
$ENTRY R05-CCompile {
  e.CSources = <CCompile-SwSetEnv (<GetEnv 'R05CCOMP'>) e.CSources>;
}

CCompile-SwSetEnv {
  (/* не установлена R05CCOMP */) e.CSources = 0;

  (e.CommandLine) e.CSources =
    <System
      e.CommandLine ' ' <GetEnv 'R05CFLAGS'>
      <IfNotZero
        (<GetEnv 'R05THREADS'>) ' -DNUM_THREADS=' <GetEnv 'R05THREADS'>
      >
      <Map compilerutils_IncludeFlag <R05-LoadPath>>
      <Map compilerutils_QuoteFile e.CSources>
      ' ' <GetEnv 'R05CFLAGSSUF'>
    >;
}

IfNotZero {
  (e.Number) e.Flag, <Numb e.Number> : 0 = /* пусто */;
  (e.Number) e.Flag = e.Flag;
}

$ENTRY compilerutils_IncludeFlag {
  (e.PathEntry) = ' -I"' e.PathEntry '"';
}

$ENTRY compilerutils_QuoteFile {
  (e.FileName) = ' "' e.FileName '"';
}
