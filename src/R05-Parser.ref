*$FROM LibraryEx
$EXTERN MapAccum, OneOf, Map, Reduce, Unique;
*$EXTERN Success, Fails

*$FROM Refal5-Parser
$EXTERN ScanString-FromPos, Parse, Scan, TokName;

*$FROM R5FW-Parser-Defs
$EXTERN Builtins;
*$EXTERN SpecialComment, Local, Entry, Extern, TkName, TkComma, TkSemicolon
*$EXTERN TkEOF, Function, Condition, RETURN, CALL-BLOCK, Symbol, Word
*$EXTERN Brackets, Call, TkError

*$FROM Libarary
*$EXTERN True, False

*$FROM R5FW-Transformer
*$EXTERN NO-POS


/**
  <R05-PrepareAST e.AST>
    == Success e.R05-AST
    == Fails e.Errors

  Function expands specific pseudocomments, checks specific errors
  and transform to basic Refal
*/
$ENTRY R05-PrepareAST {
  e.AST = <InsertConcatenators <CheckAST <ExpandComments e.AST>>>;
}

ExpandComments {
  e.AST = <MapAccum r05-parser_ExpandComment <EL-Create> e.AST>;
}

$ENTRY r05-parser_ExpandComment {
  t.ErrorList (SpecialComment t.SrcPos '*$' e.KeyWord s.Space e.Rest)
    , <IsKeyWord e.KeyWord> : s.Scope
    , <IsSpace s.Space> : True
    = <ParseSpecialComment
        s.Scope
        <ScanString-FromPos t.SrcPos <Spaces '*$' e.KeyWord> e.Rest>
        t.ErrorList
      >;

  t.ErrorList t.OtherNode = t.ErrorList t.OtherNode;
}

IsKeyWord {
  'ENUM' = Local;
  'EENUM' = Entry;
  'EXTRN' = Extern;
  'EXTERN' = Extern;
  'EXTERNAL' = Extern;

  e.Other = /* пусто */;
}

IsSpace { ' ' = True; '\t' = True; s.Other = False }

Spaces {
  s.Char e.String = ' ' <Spaces e.String>;
  /* пусто */ = /* пусто */
}

/*
  Для простоты разбора синтаксис ослаблен — запятые и точки с запятой
  игнорируются:

  NameList = (Name | "," | ";")*.
*/
ParseSpecialComment {
  s.Scope e.Tokens t.ErrorList
    = <DoParseSpecialComment s.Scope (/* names */) e.Tokens t.ErrorList>;
}

DoParseSpecialComment {
  s.Scope (e.Names) (TkName t.Pos e.Name) e.Tokens t.ErrorList
    = <DoParseSpecialComment
        s.Scope (e.Names (t.Pos e.Name)) e.Tokens t.ErrorList
      >;

  s.Scope (e.Names) (s.Sep t.Pos) e.Tokens t.ErrorList
    , <OneOf s.Sep TkComma TkSemicolon> : True
    = <DoParseSpecialComment s.Scope (e.Names) e.Tokens t.ErrorList>;

  Extern (e.Names) (TkEOF t.Pos) t.ErrorList = t.ErrorList (Extern e.Names);

  s.Scope (e.Names) (TkEOF t.Pos) t.ErrorList
    = t.ErrorList <Map (parser_MakeListFunction s.Scope) e.Names>;

  s.Scope (e.Names) t.Unexpected e.Tokens t.ErrorList
    = <DoParseSpecialComment
        s.Scope (e.Names) e.Tokens
        <EL-AddUnexpected t.ErrorList t.Unexpected 'comma or name'>
      >;
}

$ENTRY parser_MakeListFunction {
  s.ScopeClass (t.SrcPos e.Name) =
    (Function t.SrcPos (e.Name) s.ScopeClass /* пусто */);
}


CheckAST {
  t.ErrorList e.AST
    = <CheckAST-Aux <FindRedefinitions t.ErrorList e.AST> e.AST>;
}

FindRedefinitions {
  t.ErrorList e.AST
    = <Reduce
        r05-parser_FindRedefinitions-Item
        (t.ErrorList /* items */)
        e.AST
      >;
}

$ENTRY r05-parser_FindRedefinitions-Item {
  (t.ErrorList e.Items-B (t.KnownPos (e.Name) s.Scope e.Body) e.Items-E)
  (Extern (t.Pos e.Name) e.Names)
    = <r05-parser_FindRedefinitions-Item
        (
          <AddRedudand t.ErrorList t.Pos Extern e.Name>
          e.Items-B (t.KnownPos (e.Name) s.Scope e.Body) e.Items-E
        )
        (Extern e.Names)
      >;

  (t.ErrorList e.Items) (Extern (t.Pos e.Name) e.Names)
    = <r05-parser_FindRedefinitions-Item
        (t.ErrorList e.Items (t.Pos (e.Name) Extern /* пусто */))
        (Extern e.Names)
      >;

  (t.ErrorList e.Items) (Extern /* пусто */) = (t.ErrorList e.Items);

  (t.ErrorList e.Items-B (t.KnownPos (e.Name) s.KnownScope /* пусто */) e.Items-E)
  (Function t.Pos (e.Name) s.Scope e.Body)
    = (
        <AddRedudand t.ErrorList t.KnownPos s.KnownScope e.Name>
        e.Items-B e.Items-E (t.Pos (e.Name) s.Scope <ExtractReferences e.Body>)
      );

  (t.ErrorList e.Items-B (t.KnownPos (e.Name) s.KnownScope e.Body) e.Items-E)
  (Function t.Pos (e.Name) s.Scope /* пусто */)
    = (
        <AddRedudand t.ErrorList t.Pos s.Scope e.Name>
        e.Items-B (t.KnownPos (e.Name) s.KnownScope e.Body) e.Items-E
      );

  (t.ErrorList e.Items) (Function t.Pos (e.Name) s.Scope e.Body)
    = (t.ErrorList e.Items (t.Pos (e.Name) s.Scope <ExtractReferences e.Body>));

  (t.ErrorList e.Items) (SpecialComment t.Pos e.Text) = (t.ErrorList e.Items);
}

AddRedudand {
  t.ErrorList t.SrcPos Extern e.Name
    = <EL-AddErrorAt t.ErrorList t.SrcPos 'Redudand external name ' e.Name>;

  t.ErrorList t.SrcPos s.Scope e.Name
    = <EL-AddErrorAt
        t.ErrorList t.SrcPos
        'Empty function ' e.Name ' redefines other function'
      >;
}

CheckAST-Aux {
  (t.ErrorList e.References) e.AST
    , <CheckAST-Functions t.ErrorList e.References>
    : {
        e.UsedBuiltins (/* no errors */) = Success e.UsedBuiltins e.AST;
        e.UsedBuiltins (e.Errors) = Fails e.Errors;
      }
}

CheckAST-Functions {
  t.ErrorList e.ReferenceBags
    = <CheckAST-Functions-Aux
        <CheckAST-Functions-Calls
          t.ErrorList
          <MapAccum r05-parser_PlainBags (/* func names */) e.ReferenceBags>
        >
        (e.ReferenceBags)
      >;
}

$ENTRY r05-parser_PlainBags {
  (e.FuncNames) (t.SrcPos (e.FuncName) s.ScopeEx e.References)
    = (e.FuncNames (e.FuncName))
      <Map (r05-parser_PlainBags-Reference t.SrcPos (e.FuncName)) e.References>;
}

$ENTRY r05-parser_PlainBags-Reference {
  t.SrcPos (e.FuncName) (e.Reference) = ((t.SrcPos e.FuncName) e.Reference);
}

CheckAST-Functions-Aux {
  e.UsedBuiltins t.ErrorList (e.ReferenceBags)
    = e.UsedBuiltins
      (<EL-Destroy <CheckAST-Functions-Unused t.ErrorList e.ReferenceBags>>);
}

CheckAST-Functions-Calls {
  t.ErrorList (e.FuncNames) e.References
    = <CheckAST-Functions-DoCalls t.ErrorList (e.FuncNames) e.References>;
}

CheckAST-Functions-DoCalls {
  t.ErrorList ((e.Name) e.FuncNames) e.References
    = <CheckAST-Functions-DoCalls
        t.ErrorList (e.FuncNames) <RemoveRef (e.Name) e.References>
      >;

  t.ErrorList (/* no names */) e.References
    = <CheckAST-Functions-UsedBuiltins t.ErrorList <Builtins> (e.References)>;
}

RemoveRef {
  (e.Name) e.References-B (t.Caller e.Name) e.References-E
    = e.References-B <RemoveRef (e.Name) e.References-E>;

  (e.Name) e.References = e.References;
}

CheckAST-Functions-UsedBuiltins {
  t.ErrorList (e.Builtin) e.Builtins (e.Refs-B (t.Caller e.Builtin) e.Refs-E)
    = (Extern (NO-POS e.Builtin))
      <CheckAST-Functions-UsedBuiltins
        t.ErrorList
        e.Builtins (e.Refs-B <RemoveRef (e.Builtin) e.Refs-E>)
      >;

  t.ErrorList (e.Builtin) e.Builtins (e.References)
    = <CheckAST-Functions-UsedBuiltins t.ErrorList e.Builtins (e.References)>;

  t.ErrorList /* кончились встроенные */ (e.UndefinedReferences)
    = <Reduce
        r05-parser_UndefinedReferenceMessage t.ErrorList e.UndefinedReferences
      >;
}

$ENTRY r05-parser_UndefinedReferenceMessage {
  t.ErrorList ((t.FuncPos e.FuncName) e.Reference)
    = <EL-AddErrorAt
        t.ErrorList t.FuncPos
        'Undefined symbol ' e.Reference ' in function ' e.FuncName
      >;
}

CheckAST-Functions-Unused {
  t.ErrorList e.ReferenceBags
     = <FindUnusedFunctions
          t.ErrorList
          <PrepareBagsForFindUnusedFunctions e.ReferenceBags>
       >;
}

PrepareBagsForFindUnusedFunctions {
  e.ReferenceBags
    = <MapAccum r05-parser_SelectEntries () e.ReferenceBags>;
}

$ENTRY r05-parser_SelectEntries {
  (e.Entries) (t.SrcPos (e.Name) Entry e.References)
    = (e.Entries (e.Name)) (t.SrcPos (e.Name) Entry e.References);

  (e.Entries) (t.SrcPos (e.Name) s.ScopeEx e.References)
    = (e.Entries) (t.SrcPos (e.Name) s.ScopeEx e.References);
}

FindUnusedFunctions {
  t.ErrorList (e.UsedReferences) /* все функции вызваны */ = t.ErrorList;

  t.ErrorList ((e.NextName) e.UsedReferences)
  e.Functions-B (t.FunctionPos (e.NextName) s.Scope e.References) e.Functions-E
    = <FindUnusedFunctions
        t.ErrorList (e.UsedReferences e.References) e.Functions-B e.Functions-E
      >;

  t.ErrorList ((e.NextName) e.UsedReferences) e.Functions
    = <FindUnusedFunctions t.ErrorList (e.UsedReferences) e.Functions>;

  t.ErrorList (/* пусто */) e.UnusedFunctions
    = <Reduce r05-parser_AddUnusedMessage t.ErrorList e.UnusedFunctions>;
}

$ENTRY r05-parser_AddUnusedMessage {
  t.ErrorList (t.Pos (e.Name) s.Scope e.Body)
    = <AddUnusedMessage t.ErrorList t.Pos s.Scope e.Name>;
}

AddUnusedMessage {
  t.ErrorList t.Pos Local e.Name
     = <EL-AddErrorAt t.ErrorList t.Pos 'Unused local function ' e.Name>;

  t.ErrorList t.Pos Extern e.Name
     = <EL-AddErrorAt t.ErrorList t.Pos 'Unused external declaration ' e.Name>;
}

/*
  <ExtractReferences e.Sentences> == (e.Name)*
*/
ExtractReferences {
  e.Sentences = <Unique <Map r05-parser_ExtractReferences-Sentence e.Sentences>>;
}

$ENTRY r05-parser_ExtractReferences-Sentence {
  ((e.Pattern) e.Tail)
    = <ExtractReferences-Expr e.Pattern> <ExtractReferences-Tail e.Tail>;
}

ExtractReferences-Tail {
  (Condition (e.Result) (e.Pattern)) e.Tail
    = <ExtractReferences-Expr e.Result> <ExtractReferences-Expr e.Pattern>
      <ExtractReferences-Tail e.Tail>;

  RETURN (e.Result) = <ExtractReferences-Expr e.Result>;

  CALL-BLOCK (e.Result) e.Sentences
    = <ExtractReferences-Expr e.Result>
      <ExtractReferences e.Sentences>;
}

ExtractReferences-Expr {
  e.Expr = <Map r05-parser_ExtractReferences-Term e.Expr>;
}

$ENTRY r05-parser_ExtractReferences-Term {
  (Symbol Word e.Name) = (e.Name);

  (Brackets e.Expr) = <ExtractReferences-Expr e.Expr>;

  (Call t.SrcPos (e.Name) e.Expr)
    = (<DesugarName e.Name>) <ExtractReferences-Expr e.Expr>;

  t.Other = /* пусто */;
}

DesugarName {
  '%' = 'Mod';
  '*' = 'Mul';
  '+' = 'Add';
  '-' = 'Sub';
  '/' = 'Div';
  '?' = 'Residue';

  e.Name = e.Name;
}

/*
  <InsertConcatenators e.AST> == e.AST
  Заменяет все предложения вида <Function1 e.arg1> <Function2 e.arg2>
  на <Cat (<Function1 e.arg1>) <Function2 e.arg2>>
*/
InsertConcatenators {
  Success e.AST
    = Success
      (Extern (NO-POS 'Cat@'))
      <InsertConcatenators-AUX e.AST (/* processed */)>;
  Fails e.Errors = Fails e.Errors;
}

InsertConcatenators-AUX {
  (Extern e.externBody) e.AST-Tail (e.Processed)
    = <InsertConcatenators-AUX e.AST-Tail (e.Processed (Extern e.externBody))>;
  (SpecialComment e.CommentBody) e.AST-Tail (e.Processed)
    = <InsertConcatenators-AUX
      e.AST-Tail
      (e.Processed (SpecialComment e.CommentBody))
      >;
  (Function t.SrcPos (e.Name) s.Scope e.Sentences) e.AST-Tail (e.Processed)
    = <InsertConcatenators-AUX
      e.AST-Tail
      (
        e.Processed
        (
          Function t.SrcPos (e.Name) s.Scope
          <InsertConcatenators-Sentences e.Sentences>
        )
      )>;
  (e.Processed) = e.Processed;
}

InsertConcatenators-Sentences {
  e.Sentences
  = <InsertConcatenators-Sentences-AUX e.Sentences (/* processed */)>;
}

InsertConcatenators-Sentences-AUX {
  (t.Pattern e.Conditions RETURN (e.Result)) e.SentencesTail (e.Processed)
  = <InsertConcatenators-Sentences-AUX
    e.SentencesTail
    (
      e.Processed
      (
        t.Pattern
        <InsertConcatenators-Conditions e.Conditions>
        RETURN
        (<InsertConcatenators-Result e.Result>)
      )
    )>;
  (t.Pattern e.Conditions CALL-BLOCK (e.Result) e.SentencesInner) e.SentencesTail
  (e.Processed)
    = <InsertConcatenators-Sentences-AUX
      e.SentencesTail
      (
        e.Processed
        (
          t.Pattern
          <InsertConcatenators-Conditions e.Conditions>
          CALL-BLOCK
          (<InsertConcatenators-Result e.Result>)
          <InsertConcatenators-Sentences e.SentencesInner>
        )
      )>;
 (e.Processed) = e.Processed;
}

InsertConcatenators-Result {
  (Call t.ScrPos1 (e.Name1) e.MoreTerms)
  (Call t.ScrPos2 (e.Name2) e.MoreTerms2)
  e.TermsTail
  = <InsertConcatenators-Result
    (Call NO-POS ('Cat@')
          (Brackets
            (Call t.ScrPos1 (e.Name1) <InsertConcatenators-Result e.MoreTerms>)
          )
          (Call t.ScrPos2 (e.Name2) <InsertConcatenators-Result e.MoreTerms2>)
    )
    e.TermsTail
    >;
  (Call t.SrcPos (e.Name) e.MoreTerms) e.TermsTail
    = (Call t.SrcPos (e.Name) <InsertConcatenators-Result e.MoreTerms>)
      <InsertConcatenators-Result e.TermsTail>;
  (Brackets e.MoreTerms) e.TermsTail
    = (Brackets <InsertConcatenators-Result e.MoreTerms>)
      <InsertConcatenators-Result e.TermsTail>;
  t.OtherTerm e.TermsTail
    = t.OtherTerm <InsertConcatenators-Result e.TermsTail>;
  /* empty */ = /* empty */;
}

InsertConcatenators-Conditions {
  (Condition (e.Result) t.Pattern) e.CondtitionsTail
    = (
        Condition
        (<InsertConcatenators-Result e.Result>)
        t.Pattern
      )
      <InsertConcatenators-Conditions e.CondtitionsTail>;
  /* empty */ = /* empty */;
}

/**
  <R05-Parse-File e.SourceFile>
    == Success e.Tree
    == Fails e.Errors

  e.Errors ::= ((s.Row s.Col) e.Message)*
*/
$ENTRY R05-Parse-File {
  e.SourceFile
    , <Parse <Scan e.SourceFile>>
    : {
        Success e.AST
          , <R05-PrepareAST e.AST>
          : {
            Success e.PreparedAST = Success e.PreparedAST;

            Fails e.SemanticErrors = Fails <SortErrors e.SemanticErrors>;
          };

        Fails e.ParserErrors = Fails <SortErrors e.ParserErrors>;
      };
}

SortErrors {
  e.Errors = <DoSortErrors (/* sorted */) e.Errors>;
}

DoSortErrors {
  (e.Sorted) /* unsorted */ = e.Sorted;

  (e.Sorted) t.Next e.Unsorted =
    <DoSortErrors
      (<SortErrors-Insert e.Sorted t.Next>)
      e.Unsorted
    >;
}

SortErrors-Insert {
  /* пусто */ t.Next = t.Next;

  e.Sorted t.Great t.Next =
    <SortErrors-Insert-Compare
      e.Sorted t.Great t.Next <CompareError t.Great t.Next>
    >;
}

SortErrors-Insert-Compare {
  e.Sorted t.Great t.Next '+' = <SortErrors-Insert e.Sorted t.Next> t.Great;
  e.Sorted t.Great t.Next s.Other = e.Sorted t.Great t.Next;
}

CompareError {
  ((s.Row s.Col1 e.File1) e.Message1) ((s.Row s.Col2 e.File2) e.Message2) =
    <Compare s.Col1 s.Col2>;

  ((s.Row1 s.Col1 e.File1) e.Message1) ((s.Row2 s.Col2 e.File2) e.Message2) =
    <Compare s.Row1 s.Row2>;
}


*$ENUM ErrorList

EL-Create {
  e.Errors = (ErrorList e.Errors);
}

EL-AddErrorAt {
  (ErrorList e.Errors) t.SrcPos e.Message =
    (ErrorList e.Errors (t.SrcPos e.Message));
}

EL-AddUnexpected {
  t.ErrorList (TkError t.SrcPos e.Message) e.Expected =
    <EL-AddErrorAt
      t.ErrorList t.SrcPos e.Message
    >;

  t.ErrorList (s.Unexpected t.SrcPos e.Info) e.Expected =
    <EL-AddErrorAt
      t.ErrorList t.SrcPos
      'Unexpected ' <TokName s.Unexpected> ', expected ' e.Expected
    >;
}

EL-Destroy {
  (ErrorList e.Errors) = e.Errors;
}
